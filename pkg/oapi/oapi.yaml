openapi: "3.0.2"
info:
  title: Wrgl API
  version: "1.0"
x-uma-resource-types:
  https://www.wrgl.co/rsrcs/repository:
    description: A Wrgl repository
    iconUri: https://www.wrgl.co/rsrcs/repository/icon.png
    resourceScopes:
      - read
      - write
x-uma-resource:
  type: https://www.wrgl.co/rsrcs/repository
security:
  - oidc: [read]
paths:
  /transactions:
    post:
      operationId: createTransaction
      summary: Create a new transaction
      description:
        Starts a brand new transaction or uploads a local transaction. If no
        payload is given (Content-Type header is not set), then create a brand
        new transaction that starts now. Otherwise, it is assumed that a local
        transaction is being uploaded. In which case, `id`, `begin`, and
        `status` fields are required.
      security:
        - oidc: [write]
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/transaction"
                - type: object
                  required:
                    - id
                    - begin
                    - status
                  properties:
                    id:
                      $ref: "#/components/schemas/uuid"
      responses:
        "200":
          $ref: "#/components/responses/createTransaction"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /transactions/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      operationId: getTransaction
      summary: Get a transaction
      responses:
        "200":
          $ref: "#/components/responses/getTransaction"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
    post:
      operationId: updateTransaction
      summary: Update a transaction
      security:
        - oidc: [write]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                discard:
                  type: boolean
                commit:
                  type: boolean
      responses:
        "204":
          $ref: "#/components/responses/noContent"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /gc:
    post:
      operationId: garbageCollect
      summary: Garbage collect
      description:
        Reclaim disk space by removing unreachable objects from references
      security:
        - oidc: [write]
      responses:
        "204":
          $ref: "#/components/responses/noContent"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /refs:
    get:
      operationId: getRefs
      summary: Returns current references
      parameters:
        - in: query
          name: prefix
          description: only includes references with prefix
          schema:
            type: string
        - in: query
          name: notprefix
          description: discards references with prefix
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/getRefs"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /refs/heads/{branch}:
    parameters:
      - in: path
        name: branch
        required: true
        schema:
          $ref: "#/components/schemas/branchName"
    get:
      operationId: getBranch
      summary: Returns commit at branch
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commit"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /commits:
    post:
      operationId: createCommit
      summary: Create a new commit
      description:
        This method requires an OIDC token to be sent in "X-ID-Token" header,
        from which it will read the name and email of committer.
      security:
        - oidc: [write]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                branch:
                  $ref: "#/components/schemas/branchName"
                message:
                  type: string
                file:
                  type: string
                  format: binary
                primaryKey:
                  description: comma separated column names
                  type: string
                  format: comma-separated-value
                txid:
                  description: transaction id that this commit is a part of
                  $ref: "#/components/schemas/uuid"
      responses:
        "200":
          $ref: "#/components/responses/createCommit"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
    get:
      operationId: getCommitTree
      summary: Get a commit tree
      parameters:
        - $ref: "#/components/parameters/head"
        - in: query
          name: maxDepth
          description: max tree depth
          schema:
            type: integer
            default: 20
      responses:
        "200":
          $ref: "#/components/responses/getCommitTree"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /commits/{hash}:
    parameters:
      - $ref: "#/components/parameters/hash"
    get:
      operationId: getCommit
      summary: Get commit with its hash
      responses:
        "200":
          $ref: "#/components/responses/getCommit"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /commits/{hash}/profile:
    parameters:
      - $ref: "#/components/parameters/hash"
    get:
      operationId: getCommitProfile
      summary: Get commit profile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tableProfile"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /diff/{newCommitHash}/{oldCommitHash}:
    parameters:
      - in: path
        name: newCommitHash
        required: true
        schema:
          $ref: "#/components/schemas/objectHash"
      - in: path
        name: oldCommitHash
        required: true
        schema:
          $ref: "#/components/schemas/objectHash"
    get:
      operationId: diff
      summary: Compares and returns the difference between 2 commits
      responses:
        "200":
          description: OK
          headers:
            Cache-Control:
              $ref: "#/components/headers/cacheControlImmutable"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/diff"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /tables/{hash}:
    parameters:
      - $ref: "#/components/parameters/hash"
        description: table hash
    get:
      operationId: getTable
      summary: Get a table object
      responses:
        "200":
          description: OK
          headers:
            Cache-Control:
              $ref: "#/components/headers/cacheControlImmutable"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tablePayload"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /tables/{hash}/profile:
    parameters:
      - $ref: "#/components/parameters/hash"
        description: table hash
    get:
      operationId: getTableProfile
      summary: Get a table profile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tableProfile"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /tables/{hash}/blocks:
    parameters:
      - $ref: "#/components/parameters/hash"
        description: table hash
    get:
      operationId: getTableBlocks
      summary: Get contiguous blocks from a table
      description: >
        Similar to [getting contiguous blocks](#getBlocks). The only difference
        is that here you get the blocks that belong to a table rather than a
        commit. A block always belongs to a table, which belongs to a commit.
        Getting blocks from a commit is merely more convenient in some cases.
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
        - $ref: "#/components/parameters/format"
        - $ref: "#/components/parameters/columns"
      responses:
        "200":
          description: OK
          $ref: "#/components/responses/getBlocks"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /tables/{hash}/rows:
    parameters:
      - $ref: "#/components/parameters/hash"
        description: table hash
    get:
      operationId: getTableRows
      summary: Get rows from a table
      description: >
        Similar to [getting rows](#getRows). The only difference is that here
        you get the rows that belong to a table rather than a commit. A row
        belongs to a block, which belongs to a table, which belongs to a commit.
        Getting rows from a commit is merely more convenient in some cases.
      parameters:
        - $ref: "#/components/parameters/offsets"
      responses:
        "200":
          description: OK
          $ref: "#/components/responses/getRows"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /blocks:
    get:
      operationId: getBlocks
      summary: Get contiguous blocks
      description: >
        This is the preferred method to get a large number of contiguous rows
        efficiently. This method returns blocks from `start` to `end`
        (exclusive). Each block is 255 rows. This is useful for paginating large
        CSV for example.
      parameters:
        - $ref: "#/components/parameters/head"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
        - $ref: "#/components/parameters/format"
        - $ref: "#/components/parameters/columns"
      responses:
        "200":
          description: OK
          $ref: "#/components/responses/getBlocks"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /rows:
    get:
      operationId: getRows
      summary: Get rows with their offset
      description: >
        This is the method to get non-contiguous rows such as when fetching rows
        using offsets from [diff payload](#diffSchema"). If `offsets` is not
        given then this method redirects to
        [/tables/{hash}/blocks](#getTableBlocks) path.
      parameters:
        - $ref: "#/components/parameters/head"
        - $ref: "#/components/parameters/offsets"
      responses:
        "200":
          description: OK
          $ref: "#/components/responses/getRows"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "4XX":
          $ref: "#/components/responses/errorResponse"
        "5XX":
          $ref: "#/components/responses/errorResponse"
  /objects:
    get:
      operationId: getObjects
      summary: Returns tables and blocks in packfile format
      parameters:
        - in: query
          name: tables
          description: list of tables to return
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/objectHash"
      responses:
        "200":
          description: OK
          headers:
            Content-Encoding:
              $ref: "#/components/headers/contentEncodingGzip"
          content:
            application/x-wrgl-packfile:
              schema:
                type: string
                format: binary
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /upload-pack:
    post:
      operationId: uploadPack
      summary: Fetch latest updates
  /receive-pack:
    post:
      operationId: receivePack
      summary: Receive updates
      security:
        - oidc: [write]
  /authorization-server:
    get:
      operationId: getAuthorizationServer
      summary: Return info on authorization server
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - issuer
                  - type
                properties:
                  issuer:
                    type: string
                    description: URI of OpenIDConnect issuer
                  type:
                    type: string
                    description: authorization server type
                    enum:
                      - keycloak
components:
  securitySchemes:
    oidc:
      type: openIdConnect
      openIdConnectUrl: /.well-known/openid-configuration
      x-uma-enabled: true
  schemas:
    objectHash:
      type: string
      format: 32-digit-hex
      x-go-type: payload.Hex
      x-go-type-import:
        path: github.com/wrgl/wrgl/pkg/api/payload
    uuid:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/google/uuid
    reference:
      type: string
    branchName:
      type: string
      pattern: "^[-_0-9a-zA-Z]+$"
    table:
      type: object
      required:
        - sum
        - exist
      properties:
        sum:
          description: table hash
          $ref: "#/components/schemas/objectHash"
        columns:
          description: column names
          type: array
          items:
            type: string
        pk:
          description: indices of primary key columns
          type: array
          items:
            type: integer
        rowsCount:
          description: number of rows
          type: integer
        exist:
          description: >
            indicate whether the table object exists in repository. Non-existent
            table means the parent commit object is a shallow copy (of a full
            commit object in another repository).
          type: boolean
    columnProfile:
      type: object
      properties:
        name:
          description: column name
          type: string
        naCount:
          description: number of empty values
          type: integer
        min:
          description: minimum value
          type: number
        max:
          description: maximum value
          type: number
        mean:
          type: number
        median:
          type: number
        stdDeviation:
          description: standard deviation
          type: number
        minStrLen:
          description: minimum string length
          type: integer
        maxStrLen:
          description: maximum string length
          type: integer
        avgStrLen:
          description: average string length
          type: integer
        topValues:
          description: top 20 values and their count
          type: object
          additionalProperties:
            type: integer
        percentiles:
          description: the 5th, 10th, ... 95th percentile
          type: array
          items:
            type: number
    tableProfile:
      type: object
      x-go-type: objects.TableProfile
      x-go-type-import:
        path: github.com/wrgl/wrgl/pkg/objects
      properties:
        rowsCount:
          type: integer
        columns:
          type: array
          items:
            $ref: "#/components/schemas/columnProfile"
    commit:
      type: object
      required:
        - sum
        - authorName
        - authorEmail
        - message
        - time
        - table
      properties:
        sum:
          description: commit hash
          $ref: "#/components/schemas/objectHash"
        authorName:
          type: string
        authorEmail:
          type: string
        message:
          type: string
        table:
          $ref: "#/components/schemas/table"
        time:
          type: string
          format: date-time
        parents:
          type: array
          items:
            $ref: "#/components/schemas/objectHash"
        parentCommits:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/commit"
    rowDiff:
      type: object
      properties:
        off1:
          type: number
        off2:
          type: number
    numberDiff:
      type: object
      properties:
        name:
          type: string
        shortName:
          type: string
        old:
          type: number
        new:
          type: number
    percentileDiff:
      type: object
      properties:
        name:
          type: string
        shortName:
          type: string
        newAddition:
          type: boolean
        removed:
          type: boolean
        values:
          type: array
          items:
            type: object
            properties:
              old:
                type: number
              new:
                type: number
    topValuesDiff:
      type: object
      properties:
        name:
          type: string
        shortName:
          type: string
        newAddition:
          type: boolean
        removed:
          type: boolean
        values:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              oldCount:
                type: integer
              newCount:
                type: integer
              oldPct:
                type: integer
              newPct:
                type: integer
    columnProfileDiff:
      type: object
      properties:
        name:
          type: string
        newAddition:
          type: boolean
        removed:
          type: boolean
        stats:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/numberDiff"
              - $ref: "#/components/schemas/percentileDiff"
              - $ref: "#/components/schemas/topValuesDiff"
    tableProfileDiff:
      type: object
      x-go-type: diffprof.TableProfileDiff
      x-go-type-import:
        name: diffprof
        path: github.com/wrgl/wrgl/pkg/diff/prof
      properties:
        oldRowsCount:
          type: integer
        newRowsCount:
          type: integer
        columns:
          type: array
          items:
            $ref: "#/components/schemas/columnProfileDiff"
    diff:
      type: object
      required:
        - tableSum
        - oldTableSum
        - columns
        - oldColumns
        - pk
        - oldPK
      properties:
        tableSum:
          $ref: "#/components/schemas/objectHash"
        oldTableSum:
          $ref: "#/components/schemas/objectHash"
        oldPK:
          type: array
          items:
            type: integer
        pk:
          type: array
          items:
            type: integer
        oldColumns:
          type: array
          items:
            type: string
        columns:
          type: array
          items:
            type: string
        rowDiff:
          type: array
          items:
            $ref: "#/components/schemas/rowDiff"
        dataProfile:
          $ref: "#/components/schemas/tableProfileDiff"
    csvLocation:
      type: object
      properties:
        startLine:
          type: integer
        line:
          type: integer
        column:
          type: integer
    txStatus:
      type: string
      enum:
        - in-progress
        - committed
    transactionBranch:
      type: object
      required:
        - name
        - newSum
      properties:
        name:
          type: string
        currentSum:
          type: string
        newSum:
          type: string
    transaction:
      type: object
      properties:
        begin:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/txStatus"
    tablePayload:
      type: object
      required:
        - columns
        - pk
        - rowsCount
      properties:
        columns:
          description: column names
          type: array
          items:
            type: string
        pk:
          description: indices of primary key columns
          type: array
          items:
            type: integer
        rowsCount:
          description: number of rows
          type: integer
  parameters:
    id:
      in: path
      name: id
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
    hash:
      in: path
      name: hash
      required: true
      schema:
        $ref: "#/components/schemas/objectHash"
    start:
      in: query
      name: start
      description: starting block
      required: false
      schema:
        type: integer
        default: 0
    end:
      in: query
      name: end
      description: ending block (exclusive), defaults to total blocks count
      required: false
      schema:
        type: integer
    format:
      in: query
      name: format
      description: resulting block format
      required: false
      schema:
        type: string
        enum:
          - csv
          - binary
        default: csv
    columns:
      in: query
      name: columns
      description:
        if format=csv, prepend column names to the blocks, resulting in a CSV
        with header
      required: false
      schema:
        type: boolean
        default: false
    offsets:
      in: query
      name: offsets
      description: list of row offsets to return
      required: true
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
    head:
      in: query
      name: head
      description: reference name or commit hash of the head commit
      required: true
      schema:
        oneOf:
          - $ref: "#/components/schemas/objectHash"
          - $ref: "#/components/schemas/reference"
  headers:
    cacheControlImmutable:
      schema:
        type: string
      description: control cache.
      example: public, immutable, max-age=7776000
    contentEncodingGzip:
      schema:
        type: string
      example: gzip
  responses:
    noContent:
      description: no content
    errorResponse:
      description: bad request
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
              csv:
                $ref: "#/components/schemas/csvLocation"
    unauthorized:
      description: request doesn't have a valid rpt
      headers:
        WWW-Authenticate:
          schema:
            type: string
            format: uma-authentication
            example: |
              UMA realm="example",
              as_uri="https://as.example.com",
              ticket="016f84e8-f9b9-11e0-bd6f-0021cc6004de"
    forbidden:
      description: unable to reach the authorization server
      content:
        text/plain:
          schema:
            type: string
            example: 'Warning: 199 - "UMA Authorization Server Unreachable"'
    internalServerError:
      description: internal server error
      content:
        text/plain:
          schema:
            type: string
            example: internal server error
    getBlocks:
      description: Contiguous blocks in binary or csv format
      headers:
        Content-Encoding:
          $ref: "#/components/headers/contentEncodingGzip"
      content:
        text/csv:
          schema:
            type: string
            format: csv
        application/x-wrgl-packfile:
          schema:
            type: string
            format: binary
    getRows:
      description: Rows as CSV
      headers:
        Content-Encoding:
          $ref: "#/components/headers/contentEncodingGzip"
      content:
        text/csv:
          schema:
            type: string
            format: csv
    createTransaction:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: "#/components/schemas/uuid"
    getTransaction:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/transaction"
              - type: object
                required:
                  - status
                  - begin
                  - branches
                properties:
                  branches:
                    type: array
                    items:
                      $ref: "#/components/schemas/transactionBranch"
    getRefs:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - refs
            properties:
              refs:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/objectHash"
    createCommit:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              sum:
                description: commit object hash
                $ref: "#/components/schemas/objectHash"
              table:
                description: table object hash
                $ref: "#/components/schemas/objectHash"
    getCommitTree:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              sum:
                description: hash of the head commit
                $ref: "#/components/schemas/objectHash"
              root:
                description: the commit tree beginning from the head commit
                $ref: "#/components/schemas/commit"
    getCommit:
      description: OK
      headers:
        Cache-Control:
          $ref: "#/components/headers/cacheControlImmutable"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/commit"
